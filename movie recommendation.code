import requests
API_KEY = 'your_tmdb_api_key'
BASE_URL = 'https://api.themoviedb.org/3'

# Function to get movie data from TMDb API
def get_movie_data(movie_id):
    url = f"{BASE_URL}/movie/{movie_id}?api_key={API_KEY}&language=en-US"
    response = requests.get(url)
    return response.json()

# Example: Get popular movies
def get_popular_movies():
    url = f"{BASE_URL}/movie/popular?api_key={API_KEY}&language=en-US&page=1"
    response = requests.get(url)
    return response.json()['results']

movies = get_popular_movies()
for movie in movies:
    print(f"{movie['title']} ({movie['release_date']})")
user_preferences = {
    'genres': ['Action', 'Comedy'],  # Example: User likes Action and Comedy movies
    'directors': ['Steven Spielberg'],  # Example: User prefers movies directed by Spielberg
    'mood': 'Exciting',  # Example: User is in the mood for action-packed movies
    'project_focus': 'Storytelling techniques',  # For project-based content
}
def filter_movies_by_genre(movies, preferred_genres):
    filtered_movies = []
    for movie in movies:
        movie_genres = movie.get('genre_ids', [])
        if any(genre in preferred_genres for genre in movie_genres):
            filtered_movies.append(movie)
    return filtered_movies

# Example: Filter based on user preferences
preferred_genres = [28, 35]  # Action and Comedy genre IDs (TMDb uses genre IDs)
filtered_movies = filter_movies_by_genre(movies, preferred_genres)
for movie in filtered_movies:
    print(f"Recommended Movie: {movie['title']}")
def filter_movies_by_genre(movies, preferred_genres):
    filtered_movies = []
    for movie in movies:
        movie_genres = movie.get('genre_ids', [])
        if any(genre in preferred_genres for genre in movie_genres):
            filtered_movies.append(movie)
    return filtered_movies

# Example: Filter based on user preferences
preferred_genres = [28, 35]  # Action and Comedy genre IDs (TMDb uses genre IDs)
filtered_movies = filter_movies_by_genre(movies, preferred_genres)
for movie in filtered_movies:
    print(f"Recommended Movie: {movie['title']}")
from sklearn.neighbors import NearestNeighbors
import numpy as np

# Sample user-movie ratings (This would be much larger in a real-world case)
user_movie_ratings = {
    1: {'movie1': 5, 'movie2': 3, 'movie3': 4},
    2: {'movie1': 4, 'movie2': 5, 'movie3': 1},
    3: {'movie1': 2, 'movie2': 1, 'movie3': 5},
}

# Convert ratings to a matrix
movie_list = ['movie1', 'movie2', 'movie3']
ratings_matrix = np.array([[user_movie_ratings[user].get(movie, 0) for movie in movie_list] for user in user_movie_ratings])

# Fit the nearest neighbor model
model = NearestNeighbors(n_neighbors=2, algorithm='auto')
model.fit(ratings_matrix)

# Example: Find movies similar to a given movie
distances, indices = model.kneighbors([ratings_matrix[0]])  # User 1's ratings as an example
for idx in indices[0]:
    print(f"Similar Movie to Movie 1: {movie_list[idx]}")
from sklearn.neighbors import NearestNeighbors
import numpy as np

# Sample user-movie ratings (This would be much larger in a real-world case)
user_movie_ratings = {
    1: {'movie1': 5, 'movie2': 3, 'movie3': 4},
    2: {'movie1': 4, 'movie2': 5, 'movie3': 1},
    3: {'movie1': 2, 'movie2': 1, 'movie3': 5},
}

# Convert ratings to a matrix
movie_list = ['movie1', 'movie2', 'movie3']
ratings_matrix = np.array([[user_movie_ratings[user].get(movie, 0) for movie in movie_list] for user in user_movie_ratings])

# Fit the nearest neighbor model
model = NearestNeighbors(n_neighbors=2, algorithm='auto')
model.fit(ratings_matrix)

# Example: Find movies similar to a given movie
distances, indices = model.kneighbors([ratings_matrix[0]])  # User 1's ratings as an example
for idx in indices[0]:
    print(f"Similar Movie to Movie 1: {movie_list[idx]}")

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Sample project descriptions
projects = [
    "Creating a short film with a focus on cinematography.",
    "Exploring storytelling techniques in horror movies.",
    "Editing a documentary focusing on social justice."
]

# Convert project descriptions into vectors
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(projects)

# Compute the similarity between projects
cosine_sim = cosine_similarity(X, X)
print(cosine_sim)  # Similarity between each pair of projects
from flask import Flask, render_template, request

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def home():
    if request.method == 'POST':
        genres = request.form.getlist('genres')
        # Add code to process the preferences and return recommendations
        recommendations = get_recommendations_based_on_genres(genres)
        return render_template('recommendations.html', movies=recommendations)
    return render_template('index.html')

def get_recommendations_based_on_genres(genres):
    # Use your content-based filtering or collaborative filtering here
    return filtered_movies  # Example

if __name__ == '__main__':
    app.run(debug=True)
